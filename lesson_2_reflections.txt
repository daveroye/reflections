What happens when you initialize a repository? Why do you need to do it?
- The hidden .git dir is created. You would need to do this so that GIT can recognize 
this as a valid repository and have a place to track changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
- staging area allows you to prepare files to go into the repository before making the 
commit. It is different than the working directory in that a specific version of the 
file is being tracked but different than the repository in that this change has not yet 
been made permanently.

How can you use the staging area to make sure you have one commit per logical
change?
- the staging area allows you to review what files and changes will be commited before the
commit. This can be especially useful if there are other changes in the working directory
that may be best to group in a separte commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- Branches are helpful in keeping different versions of the code and allowing concurrent work
to progress in different areas. Branches help in that separate changes can be tracked even to the same file.

How do the diagrams help you visualize the branch structure?
- Diagrams help to visualize by detailing what commits belong on a branch
and what commits are reachable from each branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- The changes from both branches are present in the merged branch. The branches now are merged or
or joined together.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
- The auto merging can save some time when it works and is unambiguous.
